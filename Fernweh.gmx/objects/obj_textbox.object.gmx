<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the Chat System.
// Git Check
ntAlarm = false;
introCompleted = false;
nextText = false;
timeSec = current_second;
timeMin = current_minute;
audio_play_sound(music, 1, true);

spark = 0;

// Instance Variables
blink = false;
username = "Dewphoria";

// Chat Navigation
selectedLine = 0;

testing = "old variable";

// Chat Lines
line1 = "";
line2 = "";
line3 = "";
line4 = "";
line5 = "";
line6 = "";
textHeight = room_height - 30;
textHeight2 = room_height - 46;
textHeight3 = room_height - 70;
textHeight4 = room_height - 94;
textHeight5 = room_height - 118;
textHeight6 = room_height - 142;
textAlpha = 0;
textAlpha1 = 0.65;

max_width = 400;
selected = true;
txt = "";
alarm[0] = room_speed;
can_click = true;
fadeIn = 0;
fadeOut = 0;
chatMessageAlpha = 0.25;
slideUpToggle = room_height - 274;
targetHeight = room_height - 274;
bottom = room_height - 42;
top = room_height - 274;
inkFade = 0.25;
inkSoak = 0.05;
inkFade1 = 0.65;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory.
// Amounts
inv[0] = -1;
inv[1] = -1;
inv[2] = -1;
invPos[0] = 300;
invPos[1] = 332;
invPos[2] = 364;
mushroom = 0;
bottled_water = 0;
medical_syringe = 0;


mushroom_name = "mushroom";
bottled_water_name = "bottled water";
medical_syringe_name = "medical syringe";

mushroom_value = 3;
bottled_water_value = 5;
medical_syringe_value = 20;
satisfyHunger = 0;
quenchThirst = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nextText = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm for input cursor blink.
if (blink) {
    blink = false;
} else {
    blink = true;
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Commands
/*
var amount = 0;
var invItem = "";

if (txt &gt;= "eat " + string(amount) + " mushroom") {
    var amount = real(string_char_at(txt, 5));
} else if (txt &gt;= "Give me " + string(amount) + " mushrooms.") {
    var amount = real(string_char_at(txt, 9));
} else if (txt &gt;= "list " + string(invItem)) {
    var invItem = ""; 
}

if (keyboard_check_pressed(ord('N'))) {
    if (testing == "old variable") {
        testing = "new variable";
    } else {
        testing = "old variable";
    }
}

if (keyboard_check_pressed(vk_enter)) {
    if (txt = "eat " + string(amount) + " mushroom" || txt = "eat " + string(amount) + " mushrooms") {
        if (mushroom &gt; 0) {
            mushroom -= amount;
            satisfyHunger = mushroom_value;
            being_icon_thirst.hungry += satisfyHunger;
            if (amount &lt; 2) {
                txt = username + " ate a " + mushroom_name + ".";
            } else {
                txt = username + " ate " + string(amount) + " mushrooms.";
            }
        } else {
            txt = "You have no mushrooms left!";
        }
    } else if (txt = "Give me " + string(amount) + " mushrooms.") {
        mushroom += amount;
        txt = "You received " + string(amount) + " mushrooms.";
    } else if (txt = "list " + invItem) {
        txt = "You have some " + invItem;
    } else if (txt = "drink 1 water") {
        if (being_icon_thirst.thirsty &lt; 250) {
            being_icon_thirst.thirsty += 1;
        } else {
            txt = "You are already quenched!";
        }
    } else if (txt = "find 1 mushroom") {
        mushroom += 1;
    } else if (txt = "scavenge") {
        scavengedItemNum = choose(0, 1, 2);
        
        var scavengedText;
        switch (scavengedItemNum) {
            case 0:
            mushroom += 1;
            scavengedText = mushroom_name;
                break;
            case 1:
            bottled_water += 1;
            scavengedText = bottled_water_name;
                break;
            case 2:
            medical_syringe += 1;
            scavengedText = medical_syringe_name;
                break;
        }
        
        txt = "You found a " + string(scavengedText) + "!";
    } else if (txt = "list inventory") {
        clearChat();
        txt = "";
        keyboard_string = txt;
        output_message("INVENTORY:");
        if (mushroom &gt; 1) {
            output_message(string(mushroom) + " mushrooms.");
        } else if (mushroom &gt; 0 &amp;&amp; mushroom &lt; 2) {
            output_message(string(mushroom) + " mushroom.");
        }
        if (bottled_water &gt; 1) {
            output_message(string(bottled_water) + " bottled waters.");
        } else if (bottled_water &gt; 0 &amp;&amp; bottled_water &lt; 2) {
            output_message(string(bottled_water) + " bottled water.");
        }
        if (medical_syringe &gt; 1) {
            output_message(string(medical_syringe) + " medical syringes.");
        } else if (medical_syringe &gt; 0 &amp;&amp; medical_syringe &lt; 2) {
            output_message(string(medical_syringe) + " medical syringe.");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (introCompleted == false &amp;&amp; ntAlarm == false) {
    output_message("Your presence will be accepted pending your acceptance");  
    output_message("that you do not know everything. Become acquainted with");
    output_message("that fact and you will do exceptionally well here.");
    
    alarm[1] = room_speed * 10;
    
    ntAlarm = true;
}

if (nextText) {
    output_message("There are no dumb questions. Only dumb answers.");
    
    nextText = false;
    introCompleted = true;
}

if (txt = "/restart intro" &amp;&amp; keyboard_check_pressed(vk_enter) &amp;&amp; introCompleted) {
    clearChat();
    
    ntAlarm = false;
    introCompleted = false;
    
    nextText = false;
}

if (keyboard_check_pressed(vk_enter)) {
    if (txt = "Who are you?") {
        output_message("Dewphoria " + choose("asked", "questioned", "inquired") + " 'Who are you?'");
    
        output_message("The voice mummed back 'I am you.'");
    } else if (txt = "What do I do?") {
        output_message("'What do I do?' Dewphoria asked with great reproach.");
        
        output_message("The voice answered back 'There are many ways to *spark*");
        output_message("your imagination.'");
        
        if (spark == 0) {
            spark += 1;
            
            output_message("You learned something new!");
        }
    } else if (txt = "spark") {
        clearChat();
        
        output_message("KNOWLEDGE:");
        
        if (spark == 1) {
            output_message("Crafting");
        }
    } else if (txt = "How do I craft?") {
        // Code
    } else if (string_copy(txt, 1, 3) == "How" &amp;&amp; string_char_at(txt, string_length(txt)) != "?") {
        output_message("Is that a question?");
    } else {
        output_message("What language is that?");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run every step of the program.
// Toggle Chat Hotkeys
if (keyboard_check_pressed(vk_escape) &amp;&amp; selected) {
    selected = false;
} else if (keyboard_check_pressed(vk_enter) &amp;&amp; !selected) {
    selected = true;
}

if (mouse_check_button_pressed(mb_left)) {
    if (mouse_x &gt; 25 &amp;&amp; mouse_x &lt; 450 &amp;&amp; mouse_y &lt; room_height - 10 &amp;&amp; mouse_y &gt; room_height - 38) {
        selected = true;
    }
}

// Chat Navigation
if (keyboard_check_pressed(vk_up) &amp;&amp; selected) {
    if (selectedLine &lt; 6 &amp;&amp; selectedLine &gt;= 0) {
        selectedLine++;
    } else {
        selectedLine = 1;
    }
    
    switch (selectedLine) {
        case 0:
        txt = "";
            break;
        case 1:
        txt = line1;
            break;
        case 2:
        txt = line2;
            break;
        case 3:
        txt = line3;
            break;
        case 4:
        txt = line4;
            break;
        case 5:
        txt = line5;
            break;
        case 6:
        txt = line6;
            break;
    }
    keyboard_string = txt;
}

if (keyboard_check_pressed(vk_enter) &amp;&amp; selected) {
    output_message(txt);
}

// Chat State Functions
if (selected) {
    if (line1 != "" &amp;&amp; textHeight &gt; room_height - 46) {
        textHeight -= 128 / room_speed;
        if (textHeight &lt; room_height - 46) {
            textHeight = room_height - 46;
        }
    }
    if (line2 != "" &amp;&amp; textHeight2 &gt; room_height - 70) {
        textHeight2 -= 128 / room_speed * 2;
        if (textHeight2 &lt; room_height - 70) {
            textHeight2 = room_height - 70;
        }
    }
    if (line3 != "" &amp;&amp; textHeight3 &gt; room_height - 94) {
        textHeight3 -= 128 / room_speed * 3;
        if (textHeight3 &lt; room_height - 94) {
            textHeight3 = room_height - 94;
        }
    }
    if (line4 != "" &amp;&amp; textHeight4 &gt; room_height - 118) {
        textHeight4 -= 128 / room_speed * 4;
        if (textHeight4 &lt; room_height - 118) {
            textHeight4 = room_height - 118;
        }
    }
    if (line5 != "" &amp;&amp; textHeight5 &gt; room_height - 142) {
        textHeight5 -= 128 / room_speed * 5;
        if (textHeight5 &lt; room_height - 142) {
            textHeight5 = room_height - 142;
        }
    }
    if (line6 != "" &amp;&amp; textHeight6 &gt; room_height - 166) {
        textHeight6 -= 128 / room_speed * 6;
        if (textHeight6 &lt; room_height - 166) {
            textHeight6 = room_height - 166;
        }
    }
    
    if (textAlpha &lt; 0.65) {
        textAlpha += 0.65 / room_speed * 2;
    }

    if (textAlpha1 &lt; 0.65) {
        textAlpha1 += 0.65 / room_speed * 2;
    }
    
    if (fadeIn &lt; 0.05) {
        fadeIn += 0.05 / room_speed * 4;
        fadeOut = fadeIn;
    }
    if (inkFade &gt; 0) {
        inkFade -= 0.25 / (room_speed / 12);
    }
    if (inkFade1 &lt; 0.65) {
        inkFade1 += 0.65 / (room_speed / 12);
    }
    if (inkSoak &lt; 0.3 &amp;&amp; inkFade &gt; 0) {
        inkSoak += 0.25 / (room_speed / 8);
    } else if (inkSoak &gt; 0.05) {
        inkSoak -= 0.25 / (room_speed / 8);
    }
} else {
    textAlpha = 0;
    textAlpha1 = 0;
    textHeight = room_height - 30;
    textHeight2 = room_height - 30;
    textHeight3 = room_height - 30;
    textHeight4 = room_height - 30;
    textHeight5 = room_height - 30;
    textHeight6 = room_height - 30;
    selectedLine = 0;
    if (fadeOut &gt; 0) {
        fadeOut -= 0.05 / room_speed * 4;
    }
    txt = "";
    keyboard_string = txt;
    fadeIn = 0;
    
    if (inkFade &lt; 0.25) {
        inkFade += 0.25 / (room_speed / 12);
    }
    if (inkFade1 &gt; 0) {
        inkFade1 -= 0.65 / (room_speed / 12);
    }
    if (inkSoak &lt; 0.3 &amp;&amp; inkFade &lt; 0.25) {
        inkSoak += 0.25 / (room_speed / 8);
    } else if (inkSoak &gt; 0.05) {
        inkSoak -= 0.25 / (room_speed / 8);
    }
}

// Chat Slide Up/Down Animation
animation_slideUp();

if (line1 == "/clear") {
    clearChat();
    
    line1 = "The chat log has been cleared!";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input from the player.

if (selected) {
    if (string_width(keyboard_string) &lt; max_width) {
        txt = keyboard_string;
    } else {
        keyboard_string = txt;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Chat System.
// Testing
var i, j;
i = 0;
j = 0;
for (i = 0; i &lt; 3; i++;) {
    for (j = 0; j &lt; 3; j++;) {
        draw_text(300, invPos[j], string(inv[i]));
    }
}

// Set the font properties.
draw_set_font(fnt_arial);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_colour(c_white);

// Draw the Chat Box.
if (selected) {
    draw_set_alpha(fadeIn);
} else {
    draw_set_alpha(fadeOut);
}
draw_rectangle(25, room_height - 42, 450, slideUpToggle, false);

// Draw the Chat Input Field.
draw_set_alpha(inkSoak);
draw_rectangle(25, room_height - 10, 450, room_height - 38, false);

// Draw the Call to Action Message and Input Cursor.
draw_set_alpha(inkFade);
if (selected == false) {
    draw_text(33, room_height - 24, "Press enter to start typing.");
} else {
    draw_text(33, room_height - 24, "Press enter to start typing.");
    
    draw_set_alpha(inkFade1);
    if (blink == false) {
        draw_text(33, room_height - 24, txt);
    } else {
        draw_text(33, room_height - 24, txt + "|");
    }
}

// Draw the chat lines.
draw_set_valign(fa_bottom);
if (selected == true &amp;&amp; line1 != "") {
    draw_set_alpha(textAlpha);
    draw_text(33, textHeight, line1);
    draw_set_alpha(textAlpha1);
    draw_text(33, textHeight2, line2);
    draw_text(33, textHeight3, line3);
    draw_text(33, textHeight4, line4);
    draw_text(33, textHeight5, line5);
    draw_text(33, textHeight6, line6);
}

// Reset the draw functions.
draw_set_alpha(1);
draw_set_valign(fa_top);

draw_text(x + 500, y + 500, testing);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
