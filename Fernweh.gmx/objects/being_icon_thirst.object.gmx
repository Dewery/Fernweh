<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    // Initialise your object here
    hurt = 100;
    healed = 100;
    thirsty = 250;
    quenched = 250;
    hungry = 250;
    satisfied = 250;
    
    is_thirsty = false;
    is_hungry = false;
    
    count_true = 0;
    count_false = 0;
    count_overall = 0;
    
    alarm[0] = room_speed * 10;
    
    // Clock
    nil = 0;
    seconds = current_second;
    minutes = current_minute;
    hours = current_hour;
    
    measurementBreakS = ":";
    measurementBreakM = ":";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    is_thirsty = choose(true, true, false, false, false, false, false, false);
    is_hungry = choose(true, true, true, true, false, false, false, false);
    alarm[0] = room_speed * 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    // This is called once every frame    
    if (is_thirsty) {
        thirsty -= 1;
        count_true += 1;
        count_overall += 1;
        
        is_thirsty = false;
    } else {
        count_false += 1;
        count_overall += 1;
    }
    
    if (thirsty &lt; 0) {
        thirsty = quenched;
    }
    
    if (is_hungry) {
        hungry -= 1;
        
        is_hungry = false;
    }
    
    if (thirsty &lt; 0) {
        thirsty = quenched;
    }
    
    // Clock
    nil += 1;
    
    if (nil &gt;= 60) {
        seconds += 1;
        nil = 0;
    }
    
    if (seconds &gt;= 60) {
        minutes += 1;
        seconds = 0;
    }
    
    if (seconds &lt; 10) {
        measurementBreakS = ":0";
    } else {
        measurementBreakS = ":";
    }
    
    if (minutes &gt;= 60) {
        hours += 1;
        minutes = 0;
    }
    
    if (minutes &lt; 10) {
        measurementBreakM = ":0";
    } else {
        measurementBreakM = ":";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if (file_exists("save.sav")) {
        file_delete("save.sav");
    }
    
    var saveFile = file_text_open_write("save.sav");
    var saveRoom = room;
    file_text_write_real(saveFile, saveRoom);
    file_text_close(saveFile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    // Draw to the screen here
    // Establish local variables.
    var hunger, thirst, wellbeing, xx, xx0;
    xx = room_width - 300;
    xx0 = room_width - 29;
    hunger = (hungry / satisfied) * 100;
    thirst = (thirsty / quenched) * 100;
    wellbeing = (hurt / healed) * 100;
    
    // Testing git control.
    
    draw_set_alpha(0.05);
    draw_set_colour(c_white);
    draw_rectangle(xx, room_height - 10, room_width - 25, room_height - 50, false);
    draw_rectangle(xx, room_height - 94, room_width - 25, room_height - 54, false);
    draw_rectangle(xx, room_height - 138, room_width - 25, room_height - 98, false);
    
    draw_rectangle(xx + 175, y + 10, room_width - 25, y + 50, false);
    draw_rectangle(x + 25, y + 10, x + 300, y + 50, false);

    draw_set_alpha(0.45);
    draw_sprite(dot_i_hunger, 0, xx + 20, room_height - 30);
    draw_sprite(dot_i_thirst, 0, xx + 20, room_height - 74);
    draw_sprite(dot_i_wellbeing, 0, xx + 20, room_height - 118);
    
    draw_healthbar(xx + 40, room_height - 46, xx0, room_height - 14, hunger, c_black, c_orange, c_orange, 0, true, false);
    draw_healthbar(xx + 40, room_height - 90, xx0, room_height - 58, thirst, c_black, 33150243, 33150243, 0, true, false);
    draw_healthbar(xx + 40, room_height - 134, xx0, room_height - 102, wellbeing, c_black, c_green, c_green, 0, true, false);
    
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text((xx0 - (xx + 40)) / 2 + (xx + 40), room_height - 30, hungry);
    draw_text((xx0 - (xx + 40)) / 2 + (xx + 40), room_height - 74, thirsty);
    draw_text((xx0 - (xx + 40)) / 2 + (xx + 40), room_height - 118, hurt);
    
    draw_text(xx + 225, y + 30, string(hours) + measurementBreakM + string(minutes) + measurementBreakS + string(seconds));
    
    var day, month;
    switch(current_weekday) {
        case 0: day = "Sunday";
            break;
        case 1: day = "Monday";
            break;
        case 2: day = "Tuesday";
            break;
        case 3: day = "Wednesday";
            break;
        case 4: day = "Thursday";
            break;
        case 5: day = "Friday";
            break;
        case 6: day = "Saturday";
            break;
    }
    switch(current_month) {
        case 1: month = "January";
            break;
        case 2: month = "February";
            break;
        case 3: month = "March";
            break;
        case 4: month = "April";
            break;
        case 5: month = "May";
            break;
        case 6: month = "June";
            break;
        case 7: month = "July";
            break;
        case 8: month = "August";
            break;
        case 9: month = "September";
            break;
        case 10: month = "October";
            break;
        case 11: month = "November";
            break;
        case 12: month = "December";
            break;
    }
    draw_text(x + 162, y + 30, string_copy(day, 1, 3) + ", " + month + " " + string(current_day) + ", " + string(current_year));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
